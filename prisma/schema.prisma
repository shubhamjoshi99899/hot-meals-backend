// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/hotmeal"
}

// Add this enum
enum UserType {
  ADMIN
  DRIVER
}

model User {
  id           String    @id @default(uuid())
  phoneNumber  String    @unique
  name         String?
  isAdmin      Boolean   @default(false)
  isDriver     Boolean   @default(false)
  referralCode String?   @unique
  referredBy   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  addresses    Address[]
  orders       Order[]
  sessions     Session[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Branch {
  id       String   @id @default(uuid())
  name     String
  location String
  orders   Order[]
  menuItems MenuItem[]
  categories Category[]
}

model Category {
  id        String     @id @default(uuid())
  name      String
  branchId  String
  branch    Branch     @relation(fields: [branchId], references: [id])
  items     MenuItem[]
  createdAt DateTime   @default(now())
}

model MenuItem {
  id           String         @id @default(uuid())
  name         String
  description  String?
  imageUrl     String[]
  isVeg        Boolean
  isAvailable  Boolean        @default(true)
  priceOptions Json
  categoryId   String
  category     Category       @relation(fields: [categoryId], references: [id])
  branchId     String
  branch       Branch         @relation(fields: [branchId], references: [id])
}

model Order {
  id                 String      @id @default(uuid())
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  branchId           String
  branch             Branch      @relation(fields: [branchId], references: [id])
  addressId          String
  address            Address     @relation(fields: [addressId], references: [id])
  items              Json[]
  totalAmount        Float
  status             String      @default("PENDING")
  notes              String?
  placedAt           DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  cancelledBy        String?
  cancellationReason String?
  driverId           String?
  driver             Driver?     @relation(fields: [driverId], references: [id])
  couponId           String?
}

model Driver {
  id          String  @id @default(uuid())
  name        String
  phoneNumber String  @unique
  orders      Order[]
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  label     String
  address   String
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  Order     Order[]
}
